// ----------------------------------------------------------------------------------------------------
// Configures per platform render caps block

win_caps = {
	feature_level = ""
	use_deferred_contexts = false
}

osx_caps = {

}

ps4_caps = {
	gnm_parallel_dispatch = true
}

ios_caps = {

}

android_caps = {

}

xb1_caps = {
	use_deferred_contexts = false
}

// ---------------------------------------------------------------------------------------------------
// Configures render settings

render_settings = {
	sun_shadows = true
	sun_shadow_map_size = [ 2048, 2048 ]
	// Only on PC, PS4, XB1: medium == 4 tap PCF, high == 5x5 PCF
	// Ignored on mobile
	sun_shadow_map_filter_quality = "high"
	local_lights_shadow_map_filter_quality = "high"

	deferred_local_lights_cast_shadows = true	
	forward_local_lights_cast_shadows = true
	local_lights_shadow_atlas_size = [ 2048, 2048 ]

	particles_local_lighting = true
	particles_receive_shadows = true
	particles_tessellation = true
	particles_cast_shadows = false

	local_lights = true
	fxaa_enabled = false
	taa_enabled = true
	motion_blur_enabled = true
	ao_enabled = true
	ao_half_res = false
	dof_enabled = true
	bloom_enabled = true
	ssr_enabled = true
	ssr_high_quality = false
	lens_quality_enabled = true

	capture_cubemap = false

	debug_rendering = false
	gbuffer_albedo_visualization = false
	gbuffer_normal_visualization = false
	gbuffer_roughness_visualization = false
	gbuffer_specular_visualization = false
	gbuffer_metallic_visualization = false
	gbuffer_ambient_diffuse_visualization = false
	gbuffer_sun_shadow_visualization = false
	gbuffer_velocity_visualization = false
	gbuffer_ao_visualization = false
	bloom_visualization = false
	ssr_visualization = false
	ssr_mask_visualization = false
	shadow_cascade_visualization = false
	shadow_atlas_visualization = false
	sun_shadow_map_visualization = false
	shadow_mask_visualization = false
}

// ---------------------------------------------------------------------------------------------------
// Setup predefined shader pass flags, all flags prefixed with dev_ are used by the tools

shader_pass_flags = [
	"dev_wireframe"
	"dev_volume_visualization"
	"dev_lightmap_texel_visualization"
]

// ---------------------------------------------------------------------------------------------------
// This section contains mapping information for importing different kinds of materials/shaders
shader_import = {
	fbx = {
		default = "core/stingray_renderer/shader_import/standard"
	}
}

// ---------------------------------------------------------------------------------------------------
// Specifies which shader libraries to load at boot up.

shader_libraries = [
	"core/stingray_renderer/shader_libraries/default_shaders"
	"core/stingray_renderer/shader_libraries/development"
	"core/stingray_renderer/shader_libraries/lighting"
	"core/stingray_renderer/shader_libraries/post_processing"
	"core/stingray_renderer/shader_libraries/placeholders"
	"core/stingray_renderer/shader_libraries/fxaa"
	"core/stingray_renderer/shader_libraries/particle_billboard"
	"core/stingray_renderer/shader_libraries/terrain_utilities"
]

// Mapping between between default shaders needed by the engine and their implementation in data.
// By default these shaders are implemented in the core/stingray_renderer/default_shaders library
default_shaders = {
	// If boot ini-file configures the engine to not crash on missing shaders, the missing_shader will be used as a replacement shader
	missing_shader = "missing_shader"
}

// ---------------------------------------------------------------------------------------------------
// Specifies global resources to allocate at start up

global_resources = [
	{ type="static_branch" platforms=["ios" "android"]
		pass = [
			{ name="output_target" type="render_target" depends_on="back_buffer" format="R8G8B8A8" }
		]
		fail = [
			{ name="output_target" type="alias" aliased_resource="back_buffer" }
		]
	}

	// Regular depth stencil surface
	{ name="depth_stencil_buffer" type="render_target" depends_on="output_target" w_scale=1 h_scale=1 format="DEPTH_STENCIL" }

	// G-buffer targets
	{ name="gbuffer0" type="render_target" depends_on="output_target" w_scale=1 h_scale=1 format="R8G8B8A8" }
	{ type="static_branch" platforms=["win", "ps4", "xb1"]
		pass = [
			// Will move to smarter g-buffer encoding of normals but for now we'll just keep them in half precision on PC
			{ name="gbuffer1" type="render_target" depends_on="output_target" w_scale=1 h_scale=1 format="R16G16B16A16F" }
			// Need hi precision motion vectors on high-end platforms
			{ name="gbuffer2" type="render_target" depends_on="output_target" w_scale=1 h_scale=1 format="R16G16B16A16F" }
		]
		fail = [
			{ name="gbuffer1" type="render_target" depends_on="output_target" w_scale=1 h_scale=1 format="R8G8B8A8" }
			{ name="gbuffer2" type="render_target" depends_on="output_target" w_scale=1 h_scale=1 format="R8G8B8A8" }
		]
	}
	{ name="gbuffer3" type="render_target" depends_on="output_target" w_scale=1 h_scale=1 format="R8G8B8A8" }

	// Render target containing linear depth, populated by the linearize_depth pass
	{ type="static_branch" platforms=["win", "ps4", "xb1"]
		pass = [
			{ name="linear_depth" type="render_target" depends_on="output_target" w_scale=1 h_scale=1 format="R32F" }
			{ name="hiz_depth" type="render_target" depends_on="output_target" w_scale=1 h_scale=1 mip_levels=11 format="R32F" }

			{ type="static_branch" render_settings={ ao_half_res=true }
				pass = [
					{ name="linear_depth_div2" type="render_target" depends_on="output_target" w_scale=0.5 h_scale=0.5 mip_levels=6 format="R32F" }
				]

				fail = [
					{ name="linear_depth_div2" type="render_target" depends_on="output_target" w_scale=1 h_scale=1 mip_levels=6 format="R32F" }
				]
			}
		]
	}
	{ type="static_branch" platforms=["ios", "android"]
		pass = [
			{ name="linear_depth" type="render_target" depends_on="output_target" w_scale=1 h_scale=1 format="R32UNORM" }
		]
	}

	// Shadow map for cascaded shadow mapping from sun light
	{ type="static_branch" render_settings={ sun_shadows = true }
		pass = [
			{ name="sun_shadow_map" type="render_target" size_from_render_setting="sun_shadow_map_size" format="DEPTH_STENCIL" }
		]
	}

	{ type="static_branch" render_settings={ deferred_local_lights_cast_shadows = true }
		pass = [
			{ name="local_lights_shadow_atlas" type="render_target" size_from_render_setting="local_lights_shadow_atlas_size" format="DEPTH_STENCIL" }
		]
	}

	// Main light accumulation target
	{ name="hdr0" type="render_target" depends_on="output_target" w_scale=1 h_scale=1 format="R16G16B16A16F" }
	{ name="hdr0_history0" type="render_target" depends_on="output_target" w_scale=1 h_scale=1 format="R16G16B16A16F" }
	{ name="hdr0_div10" type="render_target" depends_on="output_target" w_scale=0.1 h_scale=0.1 format="R16G16B16A16F" }
	{ name="hdr0_rg_w_div10" type="render_target" depends_on="output_target" w_scale=0.1 h_scale=1 format="R16G16F" }
	{ name="hdr1" type="render_target" depends_on="output_target" w_scale=1 h_scale=1 format="R16G16B16A16F" }
	{ name="hdr1_rg_div10" type="render_target" depends_on="output_target" w_scale=0.1 h_scale=0.1 format="R16G16F" }
	{ name="hdr2" type="render_target" depends_on="output_target" w_scale=1 h_scale=1 format="R16G16B16A16F" }
	{ name="hdr2_div2" type="render_target" depends_on="output_target" w_scale=0.5 h_scale=0.5 format="R16G16B16A16F" }
	{ name="hdr3" type="render_target" depends_on="output_target" w_scale=1 h_scale=1 format="R16G16B16A16F" }

	{ name="hdr1_rg" type="render_target" depends_on="output_target" w_scale=1 h_scale=1 format="R16G16F" }

	{ type="static_branch" render_settings={ taa_enabled=true }
		pass = [
			{ name="hdr1_rg_history0" type="render_target" depends_on="output_target" w_scale=1 h_scale=1 format="R16G16F" }
		]
	}

	// Bloom resources
	{ name="hdr0_div4" type="render_target" depends_on="output_target" w_scale=0.25 h_scale=0.25 format="R16G16B16A16F" }
	{ name="hdr1_div4" type="render_target" depends_on="output_target" w_scale=0.25 h_scale=0.25 format="R16G16B16A16F" }
	{ name="hdr0_div2" type="render_target" depends_on="output_target" w_scale=0.5 h_scale=0.5 format="R16G16B16A16F" }

	{ type="static_branch" render_settings={ ssr_high_quality=true }
		pass = [
			{ name="hdr0_div2_mip6" type="render_target" depends_on="output_target" w_scale=1 h_scale=1 mip_levels=6 format="R16G16B16A16F" }
			{ name="hdr1_div2_mip6" type="render_target" depends_on="output_target" w_scale=1 h_scale=1 mip_levels=6 format="R16G16B16A16F" }
			{ name="ldr4_div2" type="render_target" depends_on="output_target" w_scale=1 h_scale=1 format="R8" }
			{ name="hdr3_div2" type="render_target" depends_on="output_target" w_scale=1 h_scale=1 format="R16G16B16A16F" }
		]
		fail = [
			{ name="hdr0_div2_mip6" type="render_target" depends_on="output_target" w_scale=0.5 h_scale=0.5 mip_levels=6 format="R16G16B16A16F" }
			{ name="hdr1_div2_mip6" type="render_target" depends_on="output_target" w_scale=0.5 h_scale=0.5 mip_levels=6 format="R16G16B16A16F" }
			{ name="ldr4_div2" type="render_target" depends_on="output_target" w_scale=0.5 h_scale=0.5 format="R8" }
			{ name="hdr3_div2" type="render_target" depends_on="output_target" w_scale=0.5 h_scale=0.5 format="R16G16B16A16F" }
		]
	}

	{ name="hdr1_div2" type="render_target" depends_on="output_target" w_scale=0.5 h_scale=0.5 format="R16G16B16A16F" }
	{ name="hdr0_div16" type="render_target" depends_on="output_target" w_scale=0.0625 h_scale=0.0625 format="R16G16B16A16F" }
	{ name="hdr1_div16" type="render_target" depends_on="output_target" w_scale=0.0625 h_scale=0.0625 format="R16G16B16A16F" }
	{ name="hdr0_div64" type="render_target" depends_on="output_target" w_scale=0.015625 h_scale=0.015625 format="R16G16B16A16F" }
	{ name="hdr1_div64" type="render_target" depends_on="output_target" w_scale=0.015625 h_scale=0.015625 format="R16G16B16A16F" }
	{ name="hdr0_div256" type="render_target" depends_on="output_target" w_scale=0.00390625 h_scale=0.00390625 format="R16G16B16A16F" }
	{ name="hdr1_div256" type="render_target" depends_on="output_target" w_scale=0.00390625 h_scale=0.00390625 format="R16G16B16A16F" }

	{ name="ldr0" type="render_target" depends_on="output_target" w_scale=1 h_scale=1 format="R8G8B8A8" }
	{ name="ldr1" type="render_target" depends_on="output_target" w_scale=1 h_scale=1 format="R8G8B8A8" }
	{ name="ldr2" type="render_target" depends_on="output_target" w_scale=1 h_scale=1 format="R8G8B8A8" }

	{ type="static_branch" render_settings={ ao_half_res=true }
		pass = [
			{ name="ldr1_div2" type="render_target" depends_on="output_target" w_scale=0.5 h_scale=0.5 format="R8G8B8A8" }
			{ name="ldr2_div2" type="render_target" depends_on="output_target" w_scale=0.5 h_scale=0.5 format="R8G8B8A8" }
			{ name="ldr3_div2" type="render_target" depends_on="output_target" w_scale=0.5 h_scale=0.5 format="R8G8B8A8" }
		]

		fail = [
			{ name="ldr1_div2" type="render_target" depends_on="output_target" w_scale=1 h_scale=1 format="R8G8B8A8" }
			{ name="ldr2_div2" type="render_target" depends_on="output_target" w_scale=1 h_scale=1 format="R8G8B8A8" }
			{ name="ldr3_div2" type="render_target" depends_on="output_target" w_scale=1 h_scale=1 format="R8G8B8A8" }
		]
	}

	// Targets only present during development on authoring platforms
	{ type="static_branch" platforms=["win"] render_caps={ development = true }
		pass = [
			{ name="cubemap_result" type="render_target" width=256 height=256 format="R8G8B8A8" }
		]
	}

	{ name="brdf_lut" type="texture" resource="core/stingray_renderer/lookup_tables/ibl_brdf_lut" }
	{ name="noise" type="texture" resource="core/stingray_renderer/lookup_tables/noise" }

	{ type="static_branch" platforms=["win", "xb1", "ps4"]
		pass = [
			{ name="cluster_texture" type="texture" image_type="image_3d" width=30 height=17 layers=16 format="R32G32UINT" updatable=true }
			{ name="light_index_texture" type="texture" image_type="image_2d" width=8192 height=2 format="R16UINT" updatable=true }
		]
	}
]

// ---------------------------------------------------------------------------------------------------
// Layer configurations

layer_configs = {
	default = [
		{ resource_generator="esram_allocation" }

		// Kick resource generator for rendering all shadow maps
		{ name="shadow_mapping" resource_generator="shadow_mapping" profiling_scope="shadow mapping" }
		
		{ type="static_branch" platforms=["win", "xb1", "ps4"]
			pass = [
				{ resource_generator="clustered_shading" profiling_scope="clustered shading" }
			]
		}

		// Clear DST & gbuffer2
		{ render_targets=["gbuffer2", "hdr1"] depth_stencil_target="depth_stencil_buffer" clear_flags=["SURFACE", "DEPTH", "STENCIL"] profiling_scope="clears" }

		// Base g-buffer layer, bulk of all materials renders into this
		{ name="gbuffer" render_targets=["gbuffer0", "gbuffer1", "gbuffer2", "gbuffer3"] depth_stencil_target="depth_stencil_buffer" sort="FRONT_BACK" profiling_scope="gbuffer" }

		// Kick main scene lighting
		{ resource_generator="linearize_depth" profiling_scope="linearize_depth" }

		// Decals
		{ name="decals" render_targets=["gbuffer0" "gbuffer1"] profiling_scope="decal" sort="EXPLICIT" max_resolve_count=1 }

		// Build motion vectors
		{ type="static_branch" platforms=["win", "xb1", "ps4"]
			pass = [
				{ resource_generator="generate_motion_vectors" profiling_scope="motion vectors" }
			]
		}
		
		// Layer for localized reflection probes
		{ name="reflections" render_targets=["hdr1"] depth_stencil_target="depth_stencil_buffer" sort="FRONT_BACK" profiling_scope="reflections probes" }

		// ssr
		{ type="static_branch" platforms=["win", "xb1", "ps4"]
			pass = [
				{ resource_generator="ssr_reflections" profiling_scope="ssr" }
			]
		}

		// Kick main scene lighting
		{ resource_generator="lighting" profiling_scope="lighting" }

		// Add emissive
		{ name="emissive" render_targets=["hdr0"] depth_stencil_target="depth_stencil_buffer" sort="FRONT_BACK" profiling_scope="emissive" }

		// Kick debug visualization
		{ type="static_branch" render_caps={ development=true }
			pass=[
				{ resource_generator="debug_visualization" profiling_scope="debug_visualization" }
			]
		}

		{ resource_generator="fog" profiling_scope="fog" } 

		// Skydome rendered directly into light accumulation
		{ name="skydome" render_targets=["hdr0"] depth_stencil_target="depth_stencil_buffer" sort="BACK_FRONT" profiling_scope="skydome" }

		// HDR transparency layer
		{ name="hdr_transparent" render_targets=["hdr0"] depth_stencil_target="depth_stencil_buffer" sort="BACK_FRONT" profiling_scope="hdr_transparent" max_resolve_count=1 }
		{ name="hdr_transparent_distortion" render_targets=["hdr0"] depth_stencil_target="depth_stencil_buffer" sort="BACK_FRONT" profiling_scope="hdr_transparent_distortion" max_resolve_count=1 }

		// Cube map capturing point, only present during development on authoring platforms
		{ type="static_branch" platform="win" render_caps={ development=true }
			pass = [
				{ resource_generator="cubemap_capture" }
			]
		}

		// Kick post processing
		{ resource_generator="post_processing" profiling_scope="post_processing" }

		// Wireframe rendering, primarily used for level editors wireframe rendering
		{ name="wireframe" render_targets=["output_target"] depth_stencil_target="depth_stencil_buffer" sort="BACK_FRONT" profiling_scope="wireframe"}

		{ type="static_branch" platforms=["win"]
			pass = [
				{ resource_generator="fxaa" profiling_scope="fxaa" }
			]
		}

		// LDR transparency layer, primarily used for rendering HUD
		{ name="transparent" render_targets=["output_target"] depth_stencil_target="depth_stencil_buffer" sort="BACK_FRONT" profiling_scope="transparent" }
		
		{ type="static_branch" render_caps={ development=true }
			pass = [
				{ resource_generator="debug_shadows" profiling_scope="debug_shadows" }
			]
		}

		{ name = "scaleformstudio_plugin" resource_generator="scaleformstudio_plugin" profiling_scope="scaleformstudio_plugin"}

		{ type="static_branch" platforms=["ios" "android"]
			pass = [
				// Invalidate buffers to avoid buffer loads with unneeded data
				{ render_targets=["gbuffer0", "gbuffer1", "gbuffer2"] depth_stencil_target="depth_stencil_buffer" invalidate_targets=true profiling_scope="invalidate targets" }
				{ render_targets=["gbuffer3", "hdr0", "linear_depth"] invalidate_targets=true profiling_scope="invalidate targets" }
				{ resource_generator="gl_present" profiling_scope="present" }
			]
		}

		{ resource_generator="esram_discard" }
	]
}

// ---------------------------------------------------------------------------------------------------
// resource generators

resource_generators = {
	gl_present = {
		modifiers = [
			{ type="fullscreen_pass" shader="copy:FLIP_Y" input=["output_target"] output=["back_buffer"] }
		]
	}

	debug_shadows = {
		modifiers = [
			{ type="dynamic_branch" render_settings={ shadow_atlas_visualization=true }
				pass = [
					{ type="fullscreen_pass" shader="copy" input=["local_lights_shadow_atlas"] output=["back_buffer"] dest_rect=[0.0, 0.5, 0.5, 0.5] }
				]
			}
			{ type="dynamic_branch" render_settings={ shadow_cascade_visualization=true }
				pass = [
					{ type="fullscreen_pass" shader="copy" input=["sun_shadow_map"] output=["back_buffer"] dest_rect=[0.0, 0.5, 0.5, 0.5] }
				]
			}
			{ type="dynamic_branch" render_settings={ sun_shadow_map_visualization=true }
				pass = [
					{ type="fullscreen_pass" shader="copy" input=["sun_shadow_map"] output=["back_buffer"] dest_rect=[0.0, 0.5, 0.5, 0.5] }
				]
			}			
		]
	}

	debug_visualization = {
		modifiers = [
			{ type="dynamic_branch" render_settings={ debug_rendering=true }
				pass = [
					{ type="dynamic_branch"  render_settings={ gbuffer_albedo_visualization=true }
						pass = [
							{ type="fullscreen_pass" shader="gbuffer_debug:ALBEDO_VISUALIZATION" output=["output_target"] }
						]
					}
					{ type="dynamic_branch" render_settings={ gbuffer_normal_visualization=true }
						pass = [
							{ type="fullscreen_pass" shader="gbuffer_debug:NORMAL_VISUALIZATION" output=["output_target"] }
						]
					}
					{ type="dynamic_branch" render_settings={ gbuffer_roughness_visualization=true }
						pass = [
							{ type="fullscreen_pass" shader="gbuffer_debug:ROUGHNESS_VISUALIZATION" output=["output_target"] }
						]
					}
					{ type="dynamic_branch" render_settings={ gbuffer_specular_visualization=true }
						pass = [
							{ type="fullscreen_pass" shader="gbuffer_debug:SPECULAR_VISUALIZATION" output=["output_target"] }
						]
					}
					{ type="dynamic_branch" render_settings={ gbuffer_metallic_visualization=true }
						pass = [
							{ type="fullscreen_pass" shader="gbuffer_debug:METALLIC_VISUALIZATION" output=["output_target"] }
						]
					}
					{ type="dynamic_branch" render_settings={ gbuffer_sun_shadow_visualization=true }
						pass = [
							{ type="fullscreen_pass" shader="gbuffer_debug:SUN_SHADOW_VISUALIZATION" output=["output_target"] }
						]
					}
					{ type="dynamic_branch" render_settings={ gbuffer_velocity_visualization=true }
						pass = [
							{ type="fullscreen_pass" shader="gbuffer_debug:VELOCITY_VISUALIZATION" output=["output_target"] }
						]
					}
					{ type="dynamic_branch" render_settings={ gbuffer_ao_visualization=true }
						pass = [
							{ type="fullscreen_pass" shader="gbuffer_debug:AO_VISUALIZATION" output=["output_target"] }
						]
					}

					{ type="fullscreen_pass" shader="gbuffer_debug:FILL_UNTOUCHED_PIXELS" output=["output_target"] depth_stencil_target="depth_stencil_buffer" }
				]
			}
		]
	}

	clustered_shading = {
		modifiers = [
			{ type="clustered_shading" cluster_texture="cluster_texture" light_index_texture="light_index_texture" cluster_max_depth=500.0 atlased_shadow_mapping_modifier="local_shadows" }
		]
	}

	shadow_mapping = {
		modifiers = [
			{ type="find_global_light" write_found="sun_enabled" write_color="sun_color" write_direction="sun_direction" write_shadows_enabled="sun_shadows_enabled" }

			// Render 4 slices cascaded shadow map from sun light if sun_shadows == true
			{ type="dynamic_branch" render_settings={ sun_shadows=true } shading_environment={ sun_shadows_enabled=true }
				pass = [
					{ type="cascaded_shadow_mapping" profiling_scope="cascaded_shadow_mapping" light_direction="sun_direction" padding=2
						slices = [
							{ depth_range="sun_shadow_slice_depth_ranges" viewport=[0.000001 0.000001 0.5 0.5] output="sun_shadow_map" cutter_material="shadow_cutter_slice0" mask_material="global_shadow_mask_slice0" expose_world_to_shadow="sun_world_to_shadow_slice0" expose_vp_min="vp_min_slice0" expose_vp_max="vp_max_slice0" expose_scale="shadow_scale_slice0" expose_bias="shadow_bias_slice0" expose_rotation="shadow_rotation" clear=true }
							{ depth_range="sun_shadow_slice_depth_ranges" viewport=[0.5 0.000001 0.5 0.5] output="sun_shadow_map" cutter_material="shadow_cutter_slice1" mask_material="global_shadow_mask_slice1" expose_world_to_shadow="sun_world_to_shadow_slice1" expose_vp_min="vp_min_slice1" expose_vp_max="vp_max_slice1" expose_scale="shadow_scale_slice1" expose_bias="shadow_bias_slice1" clear=false }
							{ depth_range="sun_shadow_slice_depth_ranges" viewport=[0.000001 0.5 0.5 0.5] output="sun_shadow_map" cutter_material="shadow_cutter_slice2" mask_material="global_shadow_mask_slice2" expose_world_to_shadow="sun_world_to_shadow_slice2" expose_vp_min="vp_min_slice2" expose_vp_max="vp_max_slice2" expose_scale="shadow_scale_slice2" expose_bias="shadow_bias_slice2" clear=false }
							{ depth_range="sun_shadow_slice_depth_ranges" viewport=[0.5 0.5 0.5 0.5] output="sun_shadow_map" cutter_material="shadow_cutter_slice3" mask_material="global_shadow_mask_slice3" expose_world_to_shadow="sun_world_to_shadow_slice3" expose_vp_min="vp_min_slice3" expose_vp_max="vp_max_slice3" expose_scale="shadow_scale_slice3" expose_bias="shadow_bias_slice3" clear=false}
						]
					}
				]
			}

			{ type="static_branch" platforms=["win", "ps4", "xb1"]
				pass = [
					{ type="dynamic_branch" render_settings={ deferred_local_lights_cast_shadows=true }
						pass = [
							{ type="atlased_shadow_mapping" min_max_resolution=[128, 512] output="local_lights_shadow_atlas" clear=true registry_name="local_shadows" padding=2 }
						]
					}
				]
			}
		]
	}

	esram_allocation = {
		modifiers = [
			{ type="static_branch" platforms=["xb1"]
				pass = [
					{ type="esram_control"
						actions = [
							{ allocate=["depth_stencil_buffer", "sun_shadow_map"] }
						]
					}
				]
			}
		]
	}

	esram_discard = {
		modifiers = [
			{ type="static_branch" platforms=["xb1"]
				pass = [
					{ type="esram_control"
						actions = [
							{ discard=["depth_stencil_buffer", "sun_shadow_map", "hdr0"] }
							{ memory_garbage_collect=true }
						]
					}
				]
			}
		]
	}

	linearize_depth = {
		modifiers = [
			// Linearize clip-space depth and store in linear_depth target
			{ type="fullscreen_pass" shader="linearize_depth" input=["depth_stencil_buffer"] output=["linear_depth"] }
		]
	}

	generate_motion_vectors = {
		modifiers = [
			// Build and merge the skydome motion vectors
			{ type="fullscreen_pass" shader="merge_skydome_motion_vectors" input=["depth_stencil_buffer" "gbuffer2"] output=["hdr3"] }
		]
	}

	ssr_reflections = {
		modifiers = [
			{ type="dynamic_branch" render_settings={ ssr_enabled=true } shading_environment={ ssr_enabled=true } 
				pass = [
					// Build the hi-z structure
					{ type="fullscreen_pass" shader="ssr_hiz_pass:LEVEL_0" input=["depth_stencil_buffer"] output=["hiz_depth"] }

					// Generate the ssr hiz struct
					{ type="generate_mips" output_mip_range=[1,10] profiling_scope="ssr_hiz_pass"
						modifiers = [
							{ type="fullscreen_pass" shader="ssr_hiz_pass" input=["hiz_depth"] output=["hiz_depth"] }
						]
					}

					// Perform ray marching
					{ type="dynamic_branch" render_settings={ ssr_high_quality=true }
						pass = [
							{ type="fullscreen_pass" shader="ssr_ray_march_pass" input=["gbuffer1" "hdr0_history0" "hiz_depth" "hdr3" "hdr3_div2"] output=["hdr0_div2_mip6" "ldr4_div2"] profiling_scope="ssr_ray_march_pass" }
						]
						fail = [
							{ type="fullscreen_pass" shader="ssr_ray_march_pass:SSR_LOW_QUALITY" input=["gbuffer1" "hdr0_history0" "hiz_depth" "hdr3" "hdr3_div2"] output=["hdr0_div2_mip6" "ldr4_div2"] profiling_scope="ssr_ray_march_pass" }
						]
					}

					// Filter the ssr buffer
					{ type="generate_mips" output_mip_range=[1,6] profiling_scope="ssr_filter_pass"
						modifiers = [
							{ type="fullscreen_pass" shader="filter:DOWNSAMPLE_MIP" input=["hdr0_div2_mip6"] output=["hdr0_div2_mip6"] }
							{ type="fullscreen_pass" shader="filter:SEPARABLE_BILINEAR_GAUSSIAN_5TAP_X" input=["hdr0_div2_mip6"] output=["hdr1_div2_mip6"] }
							{ type="fullscreen_pass" shader="filter:SEPARABLE_BILINEAR_GAUSSIAN_5TAP_Y" input=["hdr1_div2_mip6"] output=["hdr0_div2_mip6"] }
						]
					}
				]
			}
		]
	}

	lighting = {
		modifiers = [
			// Build per-pixel sun shadow intensity mask (4 cascades)
			{ type="dynamic_branch" render_settings={ sun_shadows=true } shading_environment={ sun_shadows_enabled=true } profiling_scope="sun shadow mask"
				pass = [
					{ type="mesh_renderer" material="shadow_cutter_slice0" unit_resource="core/stingray_renderer/proxy_geometry/shadow_cutter" mesh="g_box" output=["ldr0"] depth_stencil_target="depth_stencil_buffer" }
					{ type="fullscreen_pass" material="global_shadow_mask_slice0" input=["sun_shadow_map"] depth_stencil_target="depth_stencil_buffer" output=["ldr0"] }
					{ type="mesh_renderer" material="shadow_cutter_slice1" unit_resource="core/stingray_renderer/proxy_geometry/shadow_cutter" mesh="g_box" output=["ldr0"] depth_stencil_target="depth_stencil_buffer" }
					{ type="fullscreen_pass" material="global_shadow_mask_slice1" input=["sun_shadow_map"] depth_stencil_target="depth_stencil_buffer" output=["ldr0"] }
					{ type="mesh_renderer" material="shadow_cutter_slice2" unit_resource="core/stingray_renderer/proxy_geometry/shadow_cutter" mesh="g_box" output=["ldr0"] depth_stencil_target="depth_stencil_buffer" }
					{ type="fullscreen_pass" material="global_shadow_mask_slice2" input=["sun_shadow_map"] depth_stencil_target="depth_stencil_buffer" output=["ldr0"] }
					{ type="mesh_renderer" material="shadow_cutter_slice3" unit_resource="core/stingray_renderer/proxy_geometry/shadow_cutter" mesh="g_box" output=["ldr0"] depth_stencil_target="depth_stencil_buffer" }
					{ type="fullscreen_pass" material="global_shadow_mask_slice3" input=["sun_shadow_map"] depth_stencil_target="depth_stencil_buffer" output=["ldr0"] }
				]
			}

			// Fill pixels not covered by shadow map with default shadow intensity
			{ type="fullscreen_pass" material="global_shadow_mask_fill" depth_stencil_target="depth_stencil_buffer" output=["ldr0"] profiling_scope="sun shadow mask"}

			{ type = "static_branch" platforms=["win", "ps4", "xb1"]
				pass = [
					// Calculate camera motion vectors and merge with gbuffer motion vectors

					// SSAO
					{ type="dynamic_branch" render_settings={ ao_enabled=true } shading_environment={ ao_enabled=true } profiling_scope="ssao"
						pass = [
							// Prepare the depth mips
							{ type="fullscreen_pass" shader="copy:POINT_SAMPLER" input=["linear_depth"] output=["linear_depth_div2"] profiling_scope="ssao_copy" }

							{ type="generate_mips" output_mip_range=[1,5] profiling_scope="mip_generation"
								modifiers = [
									{ type="fullscreen_pass" shader="ssao_mip_pass" input=["linear_depth_div2"] output=["linear_depth_div2"] }
								]
							}

							// Perform SSAO pass
							{ type="fullscreen_pass" shader="ssao_ao_pass" input=["linear_depth_div2" "gbuffer1" "hdr3"] output=["ldr1_div2"] profiling_scope="ssao_sampling" }
							{ type="fullscreen_pass" shader="ssao_blur_pass:SEPARABLE_SSAO_BLUR_9TAP_X" input=["ldr1_div2"] output=["ldr2_div2"] profiling_scope="ssao_blur_x" }
							{ type="fullscreen_pass" shader="ssao_blur_pass:SEPARABLE_SSAO_BLUR_9TAP_Y_PLUS_MERGE_AO_REPROJECTION" input=["ldr2_div2" "hdr3" "ldr3_div2"] output=["ldr1_div2"] profiling_scope="ssao_blur_y" }

							// Enhance SSAO by reprojecting result from last frame
							{ type="fullscreen_pass" shader="ssao_merge_pass" input=["ldr1_div2"] output=["gbuffer2"] profiling_scope="ssao_merge" }

							// Update reprojection buffers
							{ type="fullscreen_pass" shader="copy" input=["ldr1_div2"] output=["ldr3_div2"] profiling_scope="ssao_copy" }
						]
					}
				]
			}

			{ type="static_branch" platforms=["xb1"]
				pass = [
					{ type="esram_control"
						actions = [
							{ resolve=["sun_shadow_map"] }
							{ gpu_wait=["sun_shadow_map"] }
							{ discard=["sun_shadow_map"] }
							{ memory_garbage_collect=true }
							{ allocate=["hdr0"] }
						]
					}
				]
			}

			// Run global lighting pass
			{ type="dynamic_branch" shading_environment={ ssr_enabled=true }
				pass = [
					{ type="dynamic_branch" shading_environment={ sun_enabled=true }
						pass = [
							{ type="fullscreen_pass" shader="global_lighting:SUN:SSR_ENABLED" depth_stencil_target="depth_stencil_buffer" output=["hdr0"] profiling_scope="global lighting"}
						]
						fail = [
							{ type="fullscreen_pass" shader="global_lighting:SSR_ENABLED" depth_stencil_target="depth_stencil_buffer" output=["hdr0"] profiling_scope="global lighting"}
						]
					}
				]
				fail =[
					{ type="dynamic_branch" shading_environment={ sun_enabled=true }
						pass = [
							{ type="fullscreen_pass" shader="global_lighting:SUN" depth_stencil_target="depth_stencil_buffer" output=["hdr0"] profiling_scope="global lighting"}
						]
						fail = [
							{ type="fullscreen_pass" shader="global_lighting" depth_stencil_target="depth_stencil_buffer" output=["hdr0"] profiling_scope="global lighting"}
						]
					}
				]
			}

			// Run deferred shading modifier for laying down local dynamic light sources
			{ type="dynamic_branch" render_settings={ local_lights=true } profiling_scope="local_lights"
				pass = [
					{ type="deferred_shading" output=["hdr0"] depth_stencil_target="depth_stencil_buffer"
						proxy_geometry="core/stingray_renderer/proxy_geometry/light_proxies"
						atlased_shadow_mapping_modifier="local_shadows"
						light_types = [
							{ type="omni" lighting_shader="light_source:OMNI" lighting_and_shadow_shader="light_source:OMNI:SHADOW_MAPPING" proxy_mesh="g_omni" }
							{ type="spot" lighting_shader="light_source:SPOT" lighting_and_shadow_shader="light_source:SPOT:SHADOW_MAPPING" proxy_mesh="g_spot" }
							{ type="box" lighting_shader="light_source:BOX" lighting_and_shadow_shader="light_source:BOX:SHADOW_MAPPING" proxy_mesh="g_box" }
						]
					}
				]
			}

			{ type = "static_branch" render_caps={ development=true }
				pass = [
					{ type="dynamic_branch" render_settings={ gbuffer_ambient_diffuse_visualization=true }
						pass = [
							{ type="fullscreen_pass" shader="gbuffer_debug:AMBIENT_DIFFUSE_VISUALIZATION" output=["hdr0"] }
						]
					}
				]
			}
		]
	}

	fog = {
		modifiers = [
			{ type="dynamic_branch" shading_environment={ fog_enabled=true } 
				pass = [
					{ type="fullscreen_pass" shader="depth_fog" depth_stencil_target="depth_stencil_buffer" output=["hdr0"] }
				]
			}
		]
	}

	post_processing = {
		modifiers = [
			{ type="dynamic_branch" render_settings={ debug_rendering=false }
				pass = [
					{ type = "static_branch" platforms=["win", "ps4", "xb1"]
						pass = [
							{ type="dynamic_branch" render_settings={ taa_enabled=true } profiling_scope="taa"
								pass = [
									{ type="fullscreen_pass" shader="temporal_aa" input=["hdr0" "hdr0_history0" "hdr3" "linear_depth"] output=["hdr1"] profiling_scope="taa" }
									{ type="fullscreen_pass" shader="copy" input=["hdr1"] output=["hdr0_history0"] profiling_scope="taa_history_copy"}
									{ type="resource_swap" swaps = {"hdr0"="hdr1"} }
								]
								fail = [
									{ type="dynamic_branch" render_settings={ ssr_enabled=true } shading_environment={ ssr_enabled=true }
										pass=[
											{ type="fullscreen_pass" shader="copy" input=["hdr0"] output=["hdr0_history0"] profiling_scope="hdr0_history_copy"}
										]
									}
								]
							}

							{ type="dynamic_branch" render_settings={ dof_enabled=true } shading_environment={ dof_enabled=true } profiling_scope="depth_of_field"
								pass = [
									{ type="fullscreen_pass" shader="calculate_coc" input=["linear_depth"] output=["hdr1_rg"] profiling_scope="coc" }

									{ type="static_branch" render_settings={ taa_enabled=true } profiling_scope="taa_coc"
										pass = [
											{ type="fullscreen_pass" shader="temporal_aa:SIMPLE" input=["hdr1_rg" "hdr1_rg_history0" "hdr3" "linear_depth"] output=["hdr1_rg"] profiling_scope="taa_coc" }
											{ type="fullscreen_pass" shader="copy" input=["hdr1_rg"] output=["hdr1_rg_history0"] profiling_scope="taa_coc" }
										]
									}

									{ type="fullscreen_pass" shader="depth_of_field:HORIZONTAL_PASS" input=["hdr0" "hdr1_rg"] output=["hdr2"] profiling_scope="horizontal"  }
									{ type="fullscreen_pass" shader="depth_of_field:ASCENDING_DIAGONAL_PASS" input=["hdr2" "hdr1_rg"] output=["hdr1"] profiling_scope="ascending" }
									{ type="fullscreen_pass" shader="depth_of_field:DESCENDING_DIAGONAL_PASS" input=["hdr2" "hdr1_rg" "hdr1"] output=["hdr0"] profiling_scope="descending" }
								]
							}

							{ type="dynamic_branch" render_settings={ motion_blur_enabled=true } shading_environment={ motion_blur_enabled=true } profiling_scope="motion_blur"
								pass = [
									// Motion Blur
									{ type="fullscreen_pass" shader="mb_tile_max:HORIZONTAL_PASS" input=["hdr3"] output=["hdr0_rg_w_div10"] profiling_scope="mb_tile_max_h" }
									{ type="fullscreen_pass" shader="mb_tile_max:VERTICAL_PASS" input=["hdr0_rg_w_div10"] output=["hdr1_rg_div10"] profiling_scope="mb_tile_max_v" }
									{ type="fullscreen_pass" shader="mb_neighbour_max" input=["hdr1_rg_div10"] output=["hdr0_div10"] profiling_scope="mb_neighbour_max" }
									{ type="fullscreen_pass" shader="mb_bake_velocity_depth" input=["hdr3" "linear_depth"] output=["hdr1"] profiling_scope="mb_bake_velocity_depth" }
									{ type="fullscreen_pass" shader="mb_reconstruct_filter_blur" input=["hdr0" "hdr1" "hdr0_div10"] output=["hdr2"] profiling_scope="mb_reconstruct_filter_blur1" }
									{ type="fullscreen_pass" shader="mb_reconstruct_filter_blur" input=["hdr2" "hdr1" "hdr0_div10"] output=["hdr0"] profiling_scope="mb_reconstruct_filter_blur2" }
								]
							}

							{ type="dynamic_branch" render_settings={ lens_quality_enabled=true } shading_environment={ lens_quality_enabled=true } profiling_scope="lens_quality"
								pass = [ 
									{ type="fullscreen_pass" shader="lens_effects" input=["hdr0"] output=["hdr1"] profiling_scope="lens_quality" }
									{ type="resource_swap" swaps = {"hdr0"="hdr1"} }									
								]
							}					
						]
					}
					
					// Bloom
					{ type="dynamic_branch" render_settings={ bloom_enabled=true } shading_environment={ bloom_enabled=true } profiling_scope="bloom"
						pass = [
							{ type="fullscreen_pass" shader="bright_pass" input=["hdr0"] output=["hdr1_div2"] profiling_scope="bright_pass" }							

							{ type="fullscreen_pass" shader="filter:SEPARABLE_BILINEAR_GAUSSIAN_5TAP_X" input=["hdr1_div2"] output=["hdr0_div2"] }
							{ type="fullscreen_pass" shader="filter:SEPARABLE_BILINEAR_GAUSSIAN_5TAP_Y" input=["hdr0_div2"] output=["hdr1_div2"] }
							{ type="fullscreen_pass" shader="filter:DOWNSAMPLE_2x2" input=["hdr1_div2"] output=["hdr1_div4"] }

							{ type="fullscreen_pass" shader="filter:SEPARABLE_BILINEAR_GAUSSIAN_5TAP_X" input=["hdr1_div4"] output=["hdr0_div4"] }
							{ type="fullscreen_pass" shader="filter:SEPARABLE_BILINEAR_GAUSSIAN_5TAP_Y" input=["hdr0_div4"] output=["hdr1_div4"] }

							{ type="fullscreen_pass" shader="filter:DOWNSAMPLE_4x4" input=["hdr1_div4"] output=["hdr0_div16"] }
							{ type="fullscreen_pass" shader="filter:SEPARABLE_BILINEAR_GAUSSIAN_5TAP_X" input=["hdr0_div16"] output=["hdr1_div16"] }
							{ type="fullscreen_pass" shader="filter:SEPARABLE_BILINEAR_GAUSSIAN_5TAP_Y" input=["hdr1_div16"] output=["hdr0_div16"] }

							{ type="fullscreen_pass" shader="filter:DOWNSAMPLE_4x4" input=["hdr0_div16"] output=["hdr0_div64"] }
							{ type="fullscreen_pass" shader="filter:SEPARABLE_BILINEAR_GAUSSIAN_5TAP_X" input=["hdr0_div64"] output=["hdr1_div64"] }
							{ type="fullscreen_pass" shader="filter:SEPARABLE_BILINEAR_GAUSSIAN_5TAP_Y" input=["hdr1_div64"] output=["hdr0_div64"] }

							{ type="fullscreen_pass" shader="filter:DOWNSAMPLE_4x4" input=["hdr0_div64"] output=["hdr0_div256"] }
							{ type="fullscreen_pass" shader="filter:SEPARABLE_BILINEAR_GAUSSIAN_5TAP_X" input=["hdr0_div256"] output=["hdr1_div256"] }
							{ type="fullscreen_pass" shader="filter:SEPARABLE_BILINEAR_GAUSSIAN_5TAP_Y" input=["hdr1_div256"] output=["hdr0_div256"] }

							{ type="fullscreen_pass" shader="blend_bloom" input=["hdr1_div2" "hdr1_div4" "hdr0_div16" "hdr0_div64" "hdr0_div256"] output=["hdr0_div4"] profiling_scope="blend_bloom" }
						]

					}

					// Scene combine
					{ type="dynamic_branch" render_settings={ bloom_enabled=true } shading_environment={ bloom_enabled=true } profiling_scope="scene_combine"
						pass = [
							{ type="dynamic_branch" shading_environment={ color_grading_enabled=true }
								pass = [
									{ type="fullscreen_pass" shader="scene_combine:APPLY_BLOOM:COLOR_GRADING" input=["hdr0" "hdr0_div4"] output=["output_target"] profiling_scope="scene_combine" }
								]
								fail = [
									{ type="fullscreen_pass" shader="scene_combine:APPLY_BLOOM" input=["hdr0" "hdr0_div4"] output=["output_target"] profiling_scope="scene_combine" }
								]
							}							

							{ type = "static_branch" render_caps={ development=true }
								pass = [
									{ type="dynamic_branch" render_settings={ bloom_visualization=true }
										pass = [
											{ type="fullscreen_pass" shader="copy" input=["hdr0_div4"] output=["output_target"] }
										]
									}
								]
							}
						]
						fail = [
							{ type="dynamic_branch" shading_environment={ color_grading_enabled=true }
								pass = [
									{ type="fullscreen_pass" shader="scene_combine:COLOR_GRADING" input=["hdr0"] output=["output_target"] profiling_scope="scene_combine" }
								]
								fail = [
									{ type="fullscreen_pass" shader="scene_combine" input=["hdr0"] output=["output_target"] profiling_scope="scene_combine" }
								]
							}
						]
					}
				]
			}

			// We copy these buffers even if we are in debug rendering (useful to see how the ssr reprojection behaves). Remember, this needs
			// to happen at the very end of the post process layer since we are using 'hdr3_div2' to save the ssr history info.
			{ type="dynamic_branch" render_settings={ ssr_enabled=true } shading_environment={ ssr_enabled=true } profiling_scope="ssr"
				pass = [
					// Copy the ssr history. Note: we copy a ressource (hdr0_div2_mip6) with 6 mip levels into one with 1 mip level (hdr3_div2).
					// This is intended since we only want to reproject the unblurred reflection buffer
					{ type="fullscreen_pass" shader="copy" input=["hdr0_div2_mip6"] output=["hdr3_div2"] profiling_scope="ssr_copy_history" }
				]
			}

			{ type = "static_branch" render_caps={ development=true }
				pass = [
					{ type="dynamic_branch" render_settings={ ssr_visualization=true }
						pass = [
							{ type="fullscreen_pass" shader="scene_combine" input=["hdr0_div2_mip6"] output=["output_target"] }
							{ type="fullscreen_pass" shader="copy" input=["hdr0"] output=["hdr0_history0"] }
						]
					}
					{ type="dynamic_branch" render_settings={ ssr_mask_visualization=true }
						pass = [
							{ type="fullscreen_pass" shader="copy:ALPHA_TO_RGB" input=["hdr0_div2_mip6"] output=["output_target"] }
						]
					}
				]
			}
		]
	}

	fxaa = {
		modifiers = [
			{ type = "dynamic_branch" render_settings={ fxaa_enabled=true debug_rendering=false }
				pass = [
					{ type = "fullscreen_pass" shader="fxaa" depth_stencil_target="depth_stencil_buffer" input="output_target" output=["output_target"] }
				]
			}
		]
	}

	cubemap_capture = {
		modifiers = [
			{ type="dynamic_branch" render_settings={ capture_cubemap=true }
				pass = [
					{ type="fullscreen_pass" shader="copy:CUBE_CAPTURE:ENCODE_RGBM" respect_src_viewport=false respect_dest_viewport=false input="hdr0" output=["cubemap_result"] profiling_scope="cubemap_capture" }
				]
			}
		]
	}

	terrain_decoration = {
		modifiers = [
			{ type = "fullscreen_pass" shader="terrain_decoration" input=["hmap" "material_map"] output=["buffer0" "buffer1"] }
		]
	}

	scaleformstudio_plugin = {
		modifiers = [
			{
				type = "plugin"
				render_target = "output_target"
				depth_stencil = "depth_stencil_buffer"
				plugin_name = "scaleformstudio_plugin"
			}
		]
	}

	scaleformstudio_rtt_plugin = {
		modifiers = [
			{
				type = "plugin"
				render_target = "rtt_target"
				plugin_name = "scaleformstudio_plugin"
			}
		]
	}	
}

// ---------------------------------------------------------------------------------------------------
// Lookup table generation - resource generators specified in this array will run _once_ after the renderer has completed its boot process

lookup_tables = [ ]

// ---------------------------------------------------------------------------------------------------
// Viewports

viewports = {
	default = {
		// resources instanced once per viewport
		resources = [
		]

		layer_config = "default"
		output_rt = "output_target"
		output_dst = "depth_stencil_target"
	}
}

default_shading_environment = "core/stingray_renderer/environments/midday/midday"
default_terrain_material = "core/stingray_renderer/shaders/terrain_default"
